{
  "_args": [
    [
      {
        "raw": "webpack-dashboard@0.2.0",
        "scope": null,
        "escapedName": "webpack-dashboard",
        "name": "webpack-dashboard",
        "rawSpec": "0.2.0",
        "spec": "0.2.0",
        "type": "version"
      },
      "C:\\Users\\jrtan\\Documents\\Junot Files\\Foobee\\projects\\pracWebPack"
    ]
  ],
  "_from": "webpack-dashboard@0.2.0",
  "_id": "webpack-dashboard@0.2.0",
  "_inCache": true,
  "_location": "/webpack-dashboard",
  "_nodeVersion": "4.4.6",
  "_npmOperationalInternal": {
    "host": "packages-16-east.internal.npmjs.com",
    "tmp": "tmp/webpack-dashboard-0.2.0.tgz_1474853713889_0.45651813759468496"
  },
  "_npmUser": {
    "name": "exogen",
    "email": "exogen@gmail.com"
  },
  "_npmVersion": "3.10.6",
  "_phantomChildren": {},
  "_requested": {
    "raw": "webpack-dashboard@0.2.0",
    "scope": null,
    "escapedName": "webpack-dashboard",
    "name": "webpack-dashboard",
    "rawSpec": "0.2.0",
    "spec": "0.2.0",
    "type": "version"
  },
  "_requiredBy": [
    "#DEV:/"
  ],
  "_resolved": "https://registry.npmjs.org/webpack-dashboard/-/webpack-dashboard-0.2.0.tgz",
  "_shasum": "04eef9d3e8a368a16dec167814c9a7f1fa226c9f",
  "_shrinkwrap": null,
  "_spec": "webpack-dashboard@0.2.0",
  "_where": "C:\\Users\\jrtan\\Documents\\Junot Files\\Foobee\\projects\\pracWebPack",
  "author": {
    "name": "Ken Wheeler"
  },
  "bin": {
    "webpack-dashboard": "bin/webpack-dashboard.js"
  },
  "bugs": {
    "url": "https://github.com/FormidableLabs/webpack-dashboard/issues"
  },
  "dependencies": {
    "blessed": "^0.1.81",
    "commander": "^2.9.0",
    "cross-spawn": "^4.0.0",
    "filesize": "^3.3.0",
    "socket.io": "^1.4.8",
    "socket.io-client": "^1.4.8",
    "webpack": "^1.13.1"
  },
  "description": "a CLI dashboard for webpack dev server",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "shasum": "04eef9d3e8a368a16dec167814c9a7f1fa226c9f",
    "tarball": "https://registry.npmjs.org/webpack-dashboard/-/webpack-dashboard-0.2.0.tgz"
  },
  "gitHead": "c09d4b43c592e4b108d306c30b8509c5acc7c9af",
  "homepage": "https://github.com/FormidableLabs/webpack-dashboard#readme",
  "keywords": [
    "webpack",
    "cli",
    "plugin",
    "dashboard"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "exogen",
      "email": "exogen@gmail.com"
    },
    {
      "name": "thekenwheeler",
      "email": "ken_wheeler@me.com"
    }
  ],
  "name": "webpack-dashboard",
  "optionalDependencies": {},
  "peerDependencies": {
    "webpack": "*"
  },
  "readme": "#webpack-dashboard\n\nA CLI dashboard for your webpack dev server\n\n### What's this all about?\n\nWhen using webpack, especially for a dev server, you are probably used to seeing something like this:\n\n![http://i.imgur.com/p1uAqkD.png](http://i.imgur.com/p1uAqkD.png)\n\nThat's cool, but its mostly noisy and scrolly and not super helpful. This plugin changes that. Now when you run your dev server, you basically work at NASA:\n\n![http://i.imgur.com/5BWa1hB.png](http://i.imgur.com/5BWa1hB.png)\n\n### Install\n\n`npm install webpack-dashboard --save-dev`\n\n### Use\n\n***OS X Terminal.app users:*** Make sure that **View â†’ Allow Mouse Reporting** is enabled, otherwise scrolling through logs and modules won't work. If your version of Terminal.app doesn't have this feature, you may want to check out an alternative such as [iTerm2](https://www.iterm2.com/index.html).\n\n#### package.json (recommended)\n\nAfter the initial release, it was decided that running a separate process and communicating via sockets would be more efficient and solves a lot of problems with stdout.\n\nThe new way to run the dashboard is to add the plugin, and then call the provided binary.\n\nFirst, import the plugin and add it to your webpack config, or apply it to your compiler:\n\n```js\n// Import the plugin:\nvar DashboardPlugin = require('webpack-dashboard/plugin');\n\n// If you aren't using express, add it to your webpack configs plugins section:\nplugins: [\n\tnew DashboardPlugin()\n]\n\n// If you are using an express based dev server, add it with compiler.apply\ncompiler.apply(new DashboardPlugin());\n```\nNote, in the new version you don't pass the handler function to the `DashboardPlugin` constructor. Because sockets use a port, the constructor now supports passing an options object that can include a custom port (if the default is giving you problems). If using a custom port, the port number must be included in the options object here, as well as passed using the -p flag in the call to webpack-dashboard. See how below:\n\n```js\nplugins: [\n\tnew DashboardPlugin({ port: 3001 })\n]\n```\n\nThe next step, is to call webpack-dashboard from your `package.json`. So if your dev server start script previously looked like:\n\n```js\n\"scripts\": {\n\t\"dev\": \"node index.js\"\n}\n```\n\nYou would change that to:\n\n```js\n\"scripts\": {\n\t\"dev\": \"webpack-dashboard -- node index.js\"\n}\n```\n\nIf you are using the webpack-dev-server binary, you can do something like:\n\n```js\n\"scripts\": {\n\t\"dev\": \"webpack-dashboard -- webpack-dev-server --config ./webpack.dev.js\"\n}\n```\n\nAgain, the new version uses sockets, so if you want to use a custom port you must use the `-p` option to pass that:\n\n```js\n\"scripts\": {\n\t\"dev\": \"webpack-dashboard -p 3001 -- node index.js\"\n}\n```\nYou can also pass a supported ANSI color using the `-c` flag to custom colorize your dashboard:\n\n```js\n\"scripts\": {\n\t\"dev\": \"webpack-dashboard -c magenta -- node index.js\"\n}\n```\nNow you can just run your start script like normal, except now, you are awesome. Not that you weren't before. I'm just saying. More so.\n\n### Use (The Old Way)\n\n#### Turn off errors\n\nYou need to turn off all error logging by setting your webpack config `quiet` option to true. If you use webpack-hot-middleware, that is done by setting the `log` option to a no-op. You can do something sort of like this, depending upon your setup:\n\n```js\napp.use(require('webpack-dev-middleware')(compiler, {\n  quiet: true,\n  publicPath: config.output.publicPath,\n}));\n\napp.use(require('webpack-hot-middleware')(compiler, {\n  log: () => {}\n}));\n```\n\n#### webpack-dev-middleware\n\nFirst, import the dashboard and webpack plugin:\n\n```js\nvar Dashboard = require('webpack-dashboard');\nvar DashboardPlugin = require('webpack-dashboard/plugin');\n```\n\nNext, right after you create your compiler, create an instance of the dashboard and apply the plugin, like so:\n\n```js\nvar compiler = webpack(config);\n\nvar dashboard = new Dashboard();\n\ncompiler.apply(new DashboardPlugin(dashboard.setData));\n```\n\n#### webpack-dev-server\n\nIf you are running the dev server without an express server, you'll have to initialize the dashboard in your `webpack.config.js`.\n\nFirst, import the dashboard and plugin, and create a new instance of the dashboard:\n\n```js\nvar Dashboard = require('webpack-dashboard');\nvar DashboardPlugin = require('webpack-dashboard/plugin');\nvar dashboard = new Dashboard();\n```\n\nThen, in your config under `plugins`, add:\n\n```js\nnew DashboardPlugin(dashboard.setData)\n```\n\nEnsure you've set `quiet: true` in your WebpackDevServer constructor:\n\n```js\nnew WebpackDevServer(\n  Webpack(settings),\n  {\n    publicPath: settings.output.publicPath,\n    hot: true,\n    quiet: true, // lets WebpackDashboard do its thing\n    historyApiFallback: true,\n  }\n).listen(\n```\n\n#### Run it\n\nFinally, start your server using whatever command you have set up. Either you have `npm run dev` or `npm start` pointed at `node devServer.js` or something along those lines.\n\nThen, sit back and pretend you're an astronaut.\n\n### API\n\n#### webpack-dashboard (CLI)\n##### Options\n\n - `-c, --color [color]` - Custom ANSI color for your dashboard\n - `-m, --minimal` - Runs the dashboard in minimal mode\n - `-t, --title [title]` - Set title of terminal window\n - `-p, --port [port]` - Custom port for socket communication\n\n##### Arguments\n\n`[command]` - The command you want to run, i.e. `webpack-dashboard -- node index.js`\n\n#### Webpack plugin\n#### Options\n\n - `port` - Custom port for socket communication\n - `handler` - Plugin handler method, i.e. `dashboard.setData`\n\n*Note: you can also just pass a function in as an argument, which then becomes the handler, i.e. `new DashboardPlugin(dashboard.setData)`*\n\n#### Credits\n\nModule output deeply inspired by: [https://github.com/robertknight/webpack-bundle-size-analyzer](https://github.com/robertknight/webpack-bundle-size-analyzer)\n\nError output deeply inspired by: [https://github.com/facebookincubator/create-react-app](https://github.com/facebookincubator/create-react-app)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/FormidableLabs/webpack-dashboard.git"
  },
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "version": "0.2.0"
}
